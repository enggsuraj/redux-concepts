{"version":3,"sources":["features/todoSlice.js","ToDo/Input.js","ToDo/TodoItem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","setCancel","filter","x","actions","selectTodoList","todos","useStyles","makeStyles","theme","btn","marginLeft","Input","useState","input","setInput","dispatch","useDispatch","classes","className","type","value","style","width","placeholder","onChange","e","temp","target","console","log","replace","alert","Button","onClick","Date","now","variant","color","TodoItem","Checkbox","checked","event","inputProps","textAlign","params","float","App","useSelector","display","alignItems","justifyContent","src","alt","margin","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39f227f3.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nlet initialState = {\r\n  todoList: [],\r\n};\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState,\r\n  reducers: {\r\n    saveTodo: (state, action) => {\r\n      state.todoList.push(action.payload);\r\n    },\r\n    setCheck: (state, action) => {\r\n      state.todoList.map((item) => {\r\n        if (action.payload === item.id) {\r\n          if (item.done === true) {\r\n            item.done = false;\r\n          } else {\r\n            item.done = true;\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    setCancel: (state, action) => {\r\n      state.todoList.map((item) => {\r\n        if (action.payload === item.id) {\r\n          state.todoList = state.todoList.filter((x) => {\r\n            return x.id !== item.id;\r\n          });\r\n        }\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport const { saveTodo, setCheck, setCancel } = todoSlice.actions;\r\n\r\nexport const selectTodoList = (state) => state.todos.todoList;\r\n\r\nexport default todoSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { saveTodo } from \"../features/todoSlice\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Input as InputField } from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  btn: {\r\n    marginLeft: \"10px\",\r\n  },\r\n}));\r\n\r\nfunction Input() {\r\n  const [input, setInput] = useState();\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const handleInputChange = (e) => {\r\n    let temp = e.target.value;\r\n    console.log(temp);\r\n    let userText = temp.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\r\n    if (userText === \"\") {\r\n      alert(\"Enter Task\");\r\n    } else {\r\n      setInput(temp);\r\n    }\r\n  };\r\n\r\n  const addToDo = () => {\r\n    dispatch(\r\n      saveTodo({\r\n        item: input,\r\n        done: false,\r\n        id: Date.now(),\r\n      })\r\n    );\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"input\">\r\n      <InputField\r\n        type=\"text\"\r\n        value={input}\r\n        style={{ width: \"80%\" }}\r\n        placeholder=\"Enter Task\"\r\n        onChange={handleInputChange}\r\n      />\r\n      <Button\r\n        className={classes.btn}\r\n        onClick={addToDo}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n      >\r\n        Add\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCheck, setCancel } from \"../features/todoSlice\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./TodoItem.css\";\r\n\r\nfunction TodoItem({ name, done, id }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCheck = (event) => {\r\n    dispatch(setCheck(id));\r\n  };\r\n\r\n  const handleClick = (params) => {\r\n    console.log(\"Clicked\");\r\n    dispatch(setCancel(id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"todoItem\">\r\n      <Checkbox\r\n        checked={done}\r\n        onChange={handleCheck}\r\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n      />\r\n      <p\r\n        style={{ width: \"80%\", textAlign: \"left\" }}\r\n        className={done && \"todoItem--done\"}\r\n      >\r\n        {name}\r\n      </p>\r\n      <Button onClick={handleClick} color=\"default\" style={{ float: \"right\" }}>\r\n        X\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTodoList } from \"./features/todoSlice\";\r\nimport Input from \"./ToDo/Input\";\r\nimport TodoItem from \"./ToDo/TodoItem\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const todoList = useSelector(selectTodoList);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-start\",\r\n          }}\r\n        >\r\n          <img\r\n            src=\"https://www.flaticon.com/svg/vstatic/svg/4311/4311745.svg?token=exp=1614934022~hmac=65243442f78ae9f27f6da7522b80b25f\"\r\n            alt=\"\"\r\n            style={{ width: \"50px\", margin: \"20px\" }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"app__container\">\r\n          <div className=\"app__todo\">\r\n            <Input />\r\n\r\n            {todoList.map((item) => (\r\n              <>\r\n                <TodoItem name={item.item} done={item.done} id={item.id} />\r\n              </>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport todoReducer from \"../features/todoSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todos: todoReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}